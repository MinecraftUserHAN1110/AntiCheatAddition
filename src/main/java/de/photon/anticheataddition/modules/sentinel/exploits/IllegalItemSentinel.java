package de.photon.anticheataddition.modules.sentinel.exploits;

import de.photon.anticheataddition.AntiCheatAddition;
import de.photon.anticheataddition.modules.sentinel.SentinelModule;
import de.photon.anticheataddition.user.User;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemConsumeEvent;
import org.bukkit.inventory.ItemStack;
import org.jetbrains.annotations.NotNull;

import java.util.UUID;
import java.util.function.Consumer;

// This MUST be a public class, otherwise Spigot will not recognize the EventListeners!
public abstract class IllegalItemSentinel extends SentinelModule implements Listener
{

    protected IllegalItemSentinel(String restString)
    {
        super(restString);
    }

    private final Consumer<User> simpleDetection = this::detection;

    private void handlePlayerEvent(Cancellable event, UUID uuid, ItemStack stack, Consumer<User> detection)
    {
        final var user = User.getUser(uuid);
        // User bypassed or stack nonexistent or not illegal.
        if (User.isUserInvalid(user, this) || stack == null || !isIllegalStack(stack) || user == null) return;

        event.setCancelled(true);
        removeItem(user.getPlayer(), stack);
        detection.accept(user);
    }

    @EventHandler(ignoreCancelled = true)
    public void onInventoryClick(InventoryClickEvent event)
    {
        handlePlayerEvent(event, event.getWhoClicked().getUniqueId(), event.getCursor(), user -> {
            // Only detect if the player clicked their own inventory, otherwise someone might have placed that item in a chest long ago.
            if (event.getClickedInventory() != null && event.getClickedInventory().getType() == InventoryType.PLAYER) detection(user.getPlayer());
        });
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerDropItem(PlayerDropItemEvent event)
    {
        handlePlayerEvent(event, event.getPlayer().getUniqueId(), event.getItemDrop().getItemStack(), simpleDetection);
    }

    @EventHandler(ignoreCancelled = true)
    public void onEntityPickupItem(EntityPickupItemEvent event)
    {
        if (isIllegalStack(event.getItem().getItemStack())) {
            event.setCancelled(true);
            event.getItem().setPickupDelay(20000);
            event.getItem().remove();
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerItemConsume(PlayerItemConsumeEvent event)
    {
        handlePlayerEvent(event, event.getPlayer().getUniqueId(), event.getItem(), simpleDetection);
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event)
    {
        handlePlayerEvent(event, event.getPlayer().getUniqueId(), event.getItem(), simpleDetection);
    }

    protected abstract boolean isIllegalStack(@NotNull ItemStack stack);

    /**
     * Special removal method to make sure the item is removed even when bugged.
     */
    private static void removeItem(Player player, ItemStack stack)
    {
        player.getInventory().remove(stack);
        Bukkit.getScheduler().runTask(AntiCheatAddition.getInstance(), () -> player.getInventory().remove(stack));
        Bukkit.getScheduler().runTaskLater(AntiCheatAddition.getInstance(), () -> player.getInventory().remove(stack), 20L);
    }
}
